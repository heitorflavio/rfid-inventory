#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <ArduinoJson.h>  // Biblioteca adicional para manipular JSON

#define RST_PIN D3
#define SS_PIN  D4
#define LED_RED_PIN D1
#define LED_GREEN_PIN D2
#define BUZZER_PIN D0

const char* ssid = "Heitor";
const char* password = "23456789";
const char* serverHost = "http://192.168.1.7:8000/api/tag";
const char* wifiErrorMsg = "Error in WiFi connection";
const char* postErrorMsg = "Error on sending POST: ";

MFRC522 mfrc522(SS_PIN, RST_PIN); 

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  pinMode(LED_RED_PIN, OUTPUT);
  pinMode(LED_GREEN_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  
  digitalWrite(LED_RED_PIN, HIGH);
  digitalWrite(LED_GREEN_PIN, LOW);
}

String readCard() {
  String tag = "";
  while (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    delay(50);
  }
  
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    tag += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
    tag += String(mfrc522.uid.uidByte[i], HEX);
  }
  
  Serial.println("Card has been scanned!" + (tag));
  return tag;
}

String sendHttpPost(String url, String tag, String masterTag, WiFiClient& wifiClient, HTTPClient& http) {
  http.begin(wifiClient, url);  
  http.addHeader("Content-Type", "application/json");
  
  DynamicJsonDocument doc(1024);
  doc["tag"] = tag;
  if (masterTag != "") {
    doc["masterTag"] = masterTag;
  }
  String postData;
  serializeJson(doc, postData);
  
  int httpResponseCode = http.POST(postData);

  if (httpResponseCode > 0) {
    return http.getString();
  } else {
    Serial.print(postErrorMsg);
    Serial.println(httpResponseCode);
    return "";
  }
}

void beep(int times) {
  for (int i = 0; i < times; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(200);
    digitalWrite(BUZZER_PIN, LOW);
    delay(200);
  }
}

void blinkGreen(int times) {
  for (int i = 0; i < times; i++) {
    digitalWrite(LED_GREEN_PIN, HIGH);
    delay(500);
    digitalWrite(LED_GREEN_PIN, LOW);
    delay(500);
  }
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    digitalWrite(LED_RED_PIN, HIGH);
    digitalWrite(LED_GREEN_PIN, LOW);
    Serial.println(wifiErrorMsg);
    delay(1000);
    return;
  }

  digitalWrite(LED_RED_PIN, HIGH); // Keep the red light on
  String masterTag = readCard();
  beep(1); // Single beep for card read

  HTTPClient http;
  WiFiClient wifiClient;

  // Checking the master key first
  String checkUrl = String(serverHost) + "/check";
  String response = sendHttpPost(checkUrl, masterTag, "", wifiClient, http);

  if (response == "true") {
    // Master key exists, wait for a new tag and then send post to "/new"
    digitalWrite(LED_GREEN_PIN, HIGH); // Green LED on: Master key confirmed
    delay(500);
    digitalWrite(LED_GREEN_PIN, LOW);
    digitalWrite(LED_RED_PIN, HIGH); // Keep the red light on

    String newTag = readCard();
    beep(1); // Single beep for card read

    String newUrl = String(serverHost) + "/new";
    response = sendHttpPost(newUrl, newTag, masterTag, wifiClient, http);
    if (response == "true") {
      beep(2); // Double beep for successful POST to "/new"
      blinkGreen(2); // Double green blink for successful POST to "/new"
      Serial.println("New tag has been sent to /new endpoint");
    }
  } else {
    // Master key doesn't exist, send post to "/stock"
    String stockUrl = String(serverHost) + "/stock";
    response = sendHttpPost(stockUrl, masterTag, "", wifiClient, http);
    if (response == "true") {
      beep(2); // Double beep for successful POST to "/stock"
      blinkGreen(1); // Single green blink for successful POST to "/stock"
      Serial.println("Stock has been reduced for product associated with this card");
    }
  }

  http.end();
  delay(1000);
}
